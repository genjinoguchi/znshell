

Shell implementations
=====================

- Executes single commands
- Executes multiple commands with semicolons
- Executes redirection with > and <
- Utilizes pipe characters correctly as well as supporting multiple pipes

Attempted implementations
=========================



Bugs
====



Files and Function Headers
==========================

//////////////////////////
check.c - handles all of the checking of the parsed string, including cd and exit
\\\\\\\\\\\\\\\\\\\\\\\\\\

--------------------------
int check_cd()
--------------------------
Inputs: char * command
Returns: 1 if command is cd
	 0 otherwise

--------------------------
int check_exit()
--------------------------
Inputs: char * command
Returns: 1 if command is exit
	 0 otherwise

--------------------------
int check_special()
--------------------------
Inputs: char * command
Returns: Function call to run_multiple_commands
	 0

Checks specifically for semicolons and redirection symbols and runs the
relevant functions for the characters


/////////////////////////
main.c - holds the main function as well as the signal handler
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
static void sighandler()
-------------------------
Inputs: int signo
Returns: nothing

Handles signals

-------------------------
int main()
-------------------------
Inputs: nothing
Returns: nothing

Calls functions to print out prompts and get and parse inputs

/////////////////////////
parser.c - contains all of the parsing functions
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
int parse_input()
-------------------------
Inputs: char * input
Returns: 0

This is the main parsing function that combines other parsing functions

/////////////////////////
prompt.c - contains functions relating to the physical prompt
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
int print_prompt()
-------------------------
Inputs: nothing
Returns: 0

This prints out the prompt, with the current directory and a dollar sign

-------------------------
int get_input()
-------------------------
Inputs: nothing
Returns: 0

This gets the input from the prompt and leads to parsing the input

/////////////////////////
redir.c - contains all of the functions dealing with redirection
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
int process_redir()
-------------------------
Inputs: char * cmd
Returns: status after trying to run redirections

This function leads to the implementation of the pipe function as well as the other general
redirection function

-------------------------
int file_redir()
-------------------------
Inputs: char * cmd
Returns: status after trying to run redirections

This function goes through all of the different kinds of redirection available in a shell
and runs the relevant commands associated with each kind of redirection

-------------------------
int run_pipe()
-------------------------
Inputs: char * cmd1, char * cmd2
Returns: nothing

This function goes through the piping between two commands such that the output of one command
becomes the input of the other

/////////////////////////
run.c - contains all of the functions that run commands
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
int run()
-------------------------
Inputs: char * cmd, char * filename, int fd[], int oflag
Returns: status after attempting to run everything

This function is a conglomerate of all of the other run functions based on the contents of the
cmd string

-------------------------
void parse_exec()
-------------------------
Inputs: char * cmd, char *** args
Returns: nothing

This function prepares a command for an execvp call

-------------------------
int run_exec()
-------------------------
Inputs: char * cmd, char * filename, int fd[], int oflag
Returns: status after attempting to execute

This function runs a command through execvp and catches errors in case it doesn't run

-------------------------
int run_cd()
-------------------------
Inputs: char * command, char * filename, int fd[], int oflag
Returns: status after trying to change directory

This function changes directory of the whole function

-------------------------
int run_exit()
-------------------------
Inputs: char * command, char * filename, int fd[], int oflag
Returns: nothing

Exits the shell

/////////////////////////
stringsep.c - contains the stringsepar function, Genji's personal creation
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
void stringsep()
-------------------------
Inputs: char ** str, char ** new, char ** query
Returns: nothing

-------------------------
void stringsepar()
-------------------------
Inputs: char ** str, char ** new, char * query[], int * min
Returns: nothing

/////////////////////////
strip_spaces.c - contains the strip_spaces function, Wilbur's personal creation
\\\\\\\\\\\\\\\\\\\\\\\\\

-------------------------
char * strip_spaces()
-------------------------
Inputs: char * input
Returns: pointer to the first part of the input string that isn't a space

This function goes through the input string and first removes and spaces in the front, then
every sequence of 2 or more spaces after the first non-space character becomes one space,
and finally if there is an excess space at the end, it is also removed. It leaves the input
with only single spaces.
